name: Publish Devcontainer

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    paths:
      - '.devcontainer/**'
      - '.github/**'

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

  
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ env.IMAGE_NAME }}
      isRelease: ${{ startsWith(github.ref, 'refs/tags/v') }}
      version: ${{ steps.meta.outputs.version || github.sha }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup version metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
  
  build:
    needs: setup
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-24.04
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev container image for ${{ matrix.arch }}
        uses: devcontainers/ci@v0.3
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          imageName: ${{ needs.setup.outputs.imageName }}
          imageTag: ${{ needs.setup.outputs.version }}-${{ matrix.arch }}
          # when isRelease is true, push: always, otherwise push: never
          push: ${{ needs.setup.outputs.isRelease == 'true' && 'always' || 'never' }} 
          platform: ${{ matrix.platform }}
          cacheFrom: type=registry,ref=${{ needs.setup.outputs.imageName }}:buildcache-${{ matrix.arch }}
          cacheTo: type=registry,ref=${{ needs.setup.outputs.imageName }}:buildcache-${{ matrix.arch }},mode=max
          runCmd: |
            echo "--- Whoami ---"
            whoami
            echo "--- Locale ---"
            cat /etc/default/locale
            echo "--- Go version ---"
            go version
            echo "--- Java version ---"
            java --version
            echo "--- Node.js version ---"
            node --version
            echo "--- Python version ---"
            python --version
            echo "--- gh version ---"
            gh --version
            echo "--- Docker version ---"
            docker --version
            echo "--- Deno version ---"
            deno --version
            echo "--- Conda version ---"
            conda --version
            echo "--- Git ---"
            git config --system --list

  create-manifest:
    needs: [setup, build]
    # only create the manifest when isRelease is true
    if: needs.setup.outputs.isRelease == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push multi-arch manifest
        run: |
          echo "${{ needs.setup.outputs.tags }}" | while IFS= read -r tag; do 
            if [ -z "$tag" ]; then continue; fi
            docker manifest create "$tag" \
              --amend "${{ needs.setup.outputs.imageName }}:${{ needs.setup.outputs.version }}-amd64" \
              --amend "${{ needs.setup.outputs.imageName }}:${{ needs.setup.outputs.version }}-arm64"
            docker manifest push "$tag"
          done
